/*
 Navicat Premium Data Transfer

 Source Server         : 华北2
 Source Server Type    : MySQL
 Source Server Version : 50720
 Source Host           : 47.93.184.8
 Source Database       : myyaf

 Target Server Type    : MySQL
 Target Server Version : 50720
 File Encoding         : utf-8

 Date: 01/30/2018 11:48:33 AM
*/

SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `admin_user`
-- ----------------------------
DROP TABLE IF EXISTS `admin_user`;
CREATE TABLE `admin_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(16) NOT NULL COMMENT '用户名',
  `passwd` varchar(32) NOT NULL,
  `google_check` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0:关闭Google认证1:开启Google认证',
  `google_pwd` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `admin_user`
-- ----------------------------
BEGIN;
INSERT INTO `admin_user` VALUES ('1', 'handsome', '53f622050337813428846781b71cc088', '1', '234567QWERTYUIOP');
COMMIT;

-- ----------------------------
--  Table structure for `article_class`
-- ----------------------------
DROP TABLE IF EXISTS `article_class`;
CREATE TABLE `article_class` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `color` varchar(7) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uiq_name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `article_class`
-- ----------------------------
BEGIN;
INSERT INTO `article_class` VALUES ('1', 'mysql', '#3197e0'), ('2', 'php', '#c732bd'), ('3', 'linux', '#f0f01f'), ('4', 'shell', '#515c63'), ('5', 'css', '#c74d32'), ('6', 'js', '#1be36e'), ('7', 'go', '#041A75'), ('8', 'html', '#50056'), ('9', 'docker', '#349eeb'), ('10', 'python', '#32bdc7'), ('11', 'git', '#000408'), ('12', 'hexo', '#ed283f'), ('13', 'nginx', '#68b9f2'), ('14', '规范', '#000305'), ('15', '其它', '#7f64e3');
COMMIT;

-- ----------------------------
--  Table structure for `article_list`
-- ----------------------------
DROP TABLE IF EXISTS `article_list`;
CREATE TABLE `article_list` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL COMMENT '标题',
  `uid` int(11) NOT NULL COMMENT '用户id',
  `insert_time` datetime NOT NULL COMMENT '文章创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '文章最后跟新时间',
  `article_class` varchar(255) DEFAULT NULL COMMENT '文章所属分类',
  `is_show` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1:展示，0:不展示',
  `show_time` datetime DEFAULT NULL COMMENT '文章初次可见时间',
  `markdown_doc` mediumtext COMMENT 'markdown文本',
  `markdown_doc_sort` text COMMENT 'markdown文本缩略文',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `article_list`
-- ----------------------------
BEGIN;
INSERT INTO `article_list` VALUES ('2', 'mac搭建 yaf', '1', '2018-01-24 10:33:05', '2018-01-29 11:12:02', ',2,', '1', null, '## mac搭建 yaf  \r\n\r\n\r\n>参考网址http://www.laruence.com/manual/yaf.install.html\r\n\r\n>一个值得看的网址\r\nhttp://www.shixinke.com/php/yaf-configuration-introduction\r\n\r\n1.查看所有的php安装包，确保是否有yaf \r\n\r\n    $ brew search php \r\n2.安装对应版本yaf扩展，我本地习惯使用7.0版本PHP\r\n\r\n    $ brew install homebrew/php/php70-yaf\r\n3.安装yaf需要的依赖扩展，这个可以忽略\r\n\r\nYaf只支持PHP5.2及以上的版本. 并支持最新的PHP5.3.3\r\nYaf需要SPL的支持. SPL在PHP5中是默认启用的扩展模块\r\nYaf需要PCRE的支持. PCRE在PHP5中是默认启用的扩展模块\r\n\r\n目录结构\r\n	+ public\r\n		  |- Index.Php //入口文件\r\n		  |- .htaccess //重写规则    \r\n	+ conf\r\n		  |- application.ini //配置文件   \r\n	+ application\r\n		  |+ controllers\r\n		  		|- Index.php //默认控制器\r\n		  |+ views    \r\n			 	|+ index   //控制器\r\n			 		|- index.phtml //默认视图\r\n		  |+ modules //其他模块\r\n		  |+ library //本地类库\r\n		  |+ models  //model目录\r\n		  |+ plugins //插件目录\r\n\r\n\r\n4.创建上述目录结构，我先只创建必要部分\r\n```js\r\ncd ~/www\r\nmkdir myyaf;\r\ncd myyaf;\r\nmkdir public;\r\ntouch public/index.php;\r\nmkdir conf;\r\ntouch conf/application.ini;\r\nmkdir -p application/controllers;\r\ntouch application/controllers/Index.php;\r\nmkdir -p application/views/index;\r\ntouch application/views/index/index.phtml;\r\n```\r\n\r\n\r\n##### 抄写手册例子即可\r\n###### 例 3.2. 一个经典的入口文件public/index.php\r\n    <?php\r\n    define(\"APP_PATH\",  realpath(dirname(__FILE__) . \'/../\')); /* 指向    public的上一级 */\r\n    $app  = new Yaf_Application(APP_PATH . \"/conf/application.ini\");\r\n    $app->run();\r\n\r\n###### 例 3.7. 一个简单的配置文件application/conf/application.ini\r\n```js\r\n[product]\r\n;支持直接写PHP中的已定义常量\r\napplication.directory=APP_PATH \"/application/\" \r\n```\r\n\r\n\r\n例 3.8. 默认控制器application/controllers/Index.php\r\n\r\n    <?php\r\n    class IndexController extends Yaf_Controller_Abstract {\r\n       public function indexAction() {//默认Action\r\n           $this->getView()->assign(\"content\", \"WTF\");\r\n       }\r\n    }\r\n    ?>\r\n\r\n例 3.9. 一个默认Action的视图application/views/index/index.phtml\r\n```html\r\n<html>\r\n <head>\r\n   <title>Hello World</title>\r\n </head>\r\n <body>\r\n  <?php echo $content;?>\r\n </body>\r\n</html>\r\n```\r\n\r\n\r\n5.配置站点域名及nginx\r\n\r\n    mk_host  myyaf.com ~/www/myyaf/public \r\n\r\n6.修改nginx配置\r\n\r\n    vi /usr/local/etc/nginx/servers/myyaf.com.conf\r\n\r\n写入如下内容\r\n```shell\r\nserver {\r\n  listen 80;\r\n  server_name  myyaf.com;\r\n  root   /Users/pk002/www/myyaf/public;\r\n  index  index.php index.html index.htm;\r\n\r\n  if (!-e $request_filename) {\r\n    rewrite ^/(.*)  /index.php/$1 last;\r\n  }\r\n}\r\n```\r\n7.访问\r\nhttp://myyaf.com/application/index.php\r\n\r\n呵呵哒，把index.php下载下来了\r\n\r\n更改nginx配置\r\n\r\n```shell\r\nserver {\r\n  listen 80;\r\n  server_name  myyaf.com;\r\n  root   /Users/pk002/www/myyaf/public;\r\n  index  index.php index.html index.htm;\r\n\r\n  if (!-e $request_filename) {\r\n    rewrite ^/(.*)  /index.php/$1 last;\r\n  }\r\n    location ~ \\.php(.*)$ {\r\n        fastcgi_pass   127.0.0.1:9000;\r\n        fastcgi_index  index.php;\r\n        fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\r\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n        fastcgi_param  PATH_INFO  $fastcgi_path_info;\r\n        fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\r\n        include        fastcgi_params;\r\n    }\r\n}\r\n```\r\n\r\n    $ sudo nginx -s  reload\r\n\r\n\r\n再次访问，没有变成下载但是报错 \r\n\r\n>Fatal error: Class \'Yaf_Controller_Abstract\' not found\r\n\r\n好吧，智障了，单入口文件跟控制器搞反了\r\n\r\n再次访问还是这样，看phpinfo();\r\n发现没有yaf扩展\r\n重启PHP即可\r\n\r\n    $ php70-fpm restart\r\n\r\n\r\n访问再次报错\r\n\r\n妹妹的问再次智障。文件名后缀写错成.pthml 改成.phtml即可\r\n访问http://myyaf.com\r\n终于页面成功输出WTF                                                                                                                                                                                                                                                                                                                ', '## mac搭建 yaf  \r\n\r\n\r\n>参考网址http://www.laruence.com/manual/yaf.install.html\r\n\r\n>一个值得看的网址\r\nhttp://www.shixinke.com/php/yaf-configuration-introduction\r\n'), ('4', 'linux 安装PHP7.0', '1', '2018-01-27 11:57:32', null, ',2,3,', '1', null, '### linux 安装PHP7.0\r\n```shell\r\nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm ; \r\nrpm -ivh  http://rpms.remirepo.net/enterprise/remi-release-6.rpm ; \r\nyum --enablerepo=remi,remi-php70 install php php-common php-devel php-cli php-gd php-redis php-pear php-mysqlnd php-pdo php-mbstring php-xml php-soap php-mcrypt php-fpm php-bcmath php-amqp php-zip -y;\r\n```', '### linux 安装PHP7.0\r\n```shell\r\nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm ; \r\nrpm -ivh  http://rpms.remirepo.net/enterprise/remi-release-6.rpm ; \r\nyum --enablerepo=remi,remi-php70 install php php-common php-devel php-cli php-gd php-redis php-pear php-mysqlnd php-pdo php-mbstring php-xml php-soap php-mcrypt php-fpm php-bcmath php-amqp php-zip -y;\r\n```\r\n'), ('5', 'linux 安装MYSQL5.7', '1', '2018-01-27 12:11:12', '2018-01-30 00:56:38', ',1,3,', '1', null, '### linux 安装MYSQL5.7\r\n\r\n>确定本机是CentOS release 6.5\r\n\r\n```shell\r\n[root@localhost ~]# lsb_release -a\r\nLSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch\r\nDistributor ID:	CentOS\r\nDescription:	CentOS release 6.5 (Final)\r\nRelease:	6.5\r\nCodename:	Final\r\n```\r\n\r\n>前面是废话，我运维盆友给我的\r\n\r\n1. 查看是否已经默认安装mysql软件：\r\n```shell\r\nrpm -qa|grep mysql\r\n```\r\n如果存在的话，继续删除即可\r\n```shell\r\nyum remove mysql *\r\n```\r\n2.安装mysql5.7\r\n```shell\r\nvi  /etc/yum.repos.d/mysql-community.repo\r\n```\r\n\r\n写入：\r\n    [mysql57-community]\r\n    name=MySQL 5.7 Community Server\r\n    baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/\r\n    enabled=1\r\n    gpgcheck=0\r\n    gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\r\n     sudo yum install mysql-community-server\r\n\r\n\r\n\r\n安装完毕下面就是启动\r\n\r\n```shell\r\nsudo service mysqld start \r\n```\r\n\r\n通过下面指令就能找到mysql的初始密码\r\n```shell\r\nsudo grep \'temporary password\' /var/log/mysqld.log \r\n```\r\n\r\n\r\n2018-01-02T06:36:04.424767Z 1 [Note] A temporary password is generated for root@localhost: 6)hhz8no&q5U\r\n\r\n\r\n```shell\r\nmysql -uroot -p\'6)hhz8no&q5U\'\r\n```\r\n\r\n```shell\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'mypasswd\';\r\nmysql -uroot -p\'mypasswd\'\r\n```\r\n\r\nps:这里的密码是瞎填的是通过不了的，请写大小写数字较为复杂密码，简单密码无法设定是mysql的一个保护机制\r\n\r\n本机可以登入连接没问题，Mac终端不行\r\n\r\n一.先到阿里云里面网络安全组规则里面添加运行3306端对外访问\r\n\r\n二.修改mysql连接允许外网连接，有2种方法\r\n\r\n###### 1 .改表法。可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 \"mysql\" 数据库里的 \"user\" 表里的 \"host\" 项，从\"localhost\"改称\"%\"\r\n\r\n```shell\r\nmysql -uroot -p\'mypasswd\'\r\nmysql>use mysql;\r\nmysql>update user set host = \'%\' where user = \'root\';\r\nmysql>select host, user from user;\r\n```\r\n\r\n>还是不行\r\n重启mysql\r\n```shell\r\nsudo service mysqld restart\r\n```\r\n\r\n>连接成功了，LOL\r\n\r\n\r\n###### 2 .  授权法。例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。\r\n\r\n>```shell\r\nGRANT ALL PRIVILEGES ON *.* TO \'myuser\'@\'%\' IDENTIFIED BY \'mypassword\' WITH GRANT OPTION;\r\n```\r\n如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码\r\n```shell\r\nGRANT ALL PRIVILEGES ON *.* TO \'root\'@\'192.168.1.3\' IDENTIFIED BY \'mypassword\' WITH GRANT OPTION;\r\nGRANT ALL PRIVILEGES ON *.* TO \'root\'@\'10.10.40.54\' IDENTIFIED BY \'123456\' WITH GRANT OPTION;\r\n```                                                                                                                                                ', '### linux 安装MYSQL5.7\r\n\r\n>确定本机是CentOS release 6.5\r\n\r\n```shell\r\n[root@localhost ~]# lsb_release -a\r\nLSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch\r\nDistributor ID:	CentOS\r\nDescription:	CentOS release 6.5 (Final)\r\nRelease:	6.5\r\nCodename:	Final\r\n```'), ('6', 'linux 安装nginx', '1', '2018-01-27 12:21:52', '2018-01-27 12:28:32', ',3,13,', '1', null, '### linux 安装nginx\r\n```shell\r\nyum install nginx -y\r\n```\r\n\r\n服务器上重新安装了Nginx，在启动的时候报了个错误，\r\nnginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)\r\n\r\n网上查询了下资料，是Nginx监听端口那边没有修改导致的报错。\r\n修改nginx.conf即可\r\n\r\n我的是*nginx.conf include了 /etc/nginx/conf.d/default.conf *\r\n\r\n默认的是这样的：\r\n```shell\r\nlisten       80 default_server;\r\nlisten       [::]:80 default_server;\r\n```\r\n\r\n修改：\r\n```shell\r\nlisten       80;\r\n#listen       [::]:80 default_server;\r\n```\r\n\r\n防火墙\r\n下面是查看防火墙\r\n```shell\r\n#sudo iptables -L -nv\r\n```\r\n\r\n下面的是查看selinux\r\n```shell\r\n#getenforce\r\nDisabled 关闭\r\n```\r\n\r\n在阿里用户中心设置端口放行,右上角快速添加选择http 然后规则是0.0.0.0/0\r\n（一切正常，特么的大神指导说没有备案无法用80端口，当时心里想早知道就用香港的机器了）\r\n\r\n然后http://47.93.184.8这样就能访问到nginx了\r\n\r\n我之前还到阿里买了域名，到域名管理后面选择绑带到IP即可\r\nhttp://yetshine.com/ \r\n这样就看到nginx了\r\n\r\n哈哈搞定nginx\r\n\r\n\r\n\r\n重启：\r\n```shell\r\n$nginx –s reload\r\n```\r\n停止：\r\n```shell\r\n$nginx –s stop\r\n```\r\n测试配置文件是否正常：\r\n```shell\r\n$nginx –t\r\n```\r\n强制关闭：\r\n```shell\r\n$pkill nginx\r\n```\r\n\r\n\r\n                                                ', '### linux 安装nginx\r\n```shell\r\nyum install nginx -y\r\n```\r\n\r\n服务器上重新安装了Nginx，在启动的时候报了个错误，\r\nnginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)\r\n                                '), ('7', 'mac搭建 go', '1', '2018-01-29 01:50:37', null, ',7,', '1', null, '### mac go环境搭建1.92\r\n下列如无特殊说明\r\n$ 代码命令提示符\r\n～代表家目录\r\n学习资料https://pan.baidu.com/s/1bqUq0fP\r\n\r\n>1.到官网选择自己需要到安装包https://golang.org/dl/\r\n\r\n>2.安装包有2种分为压缩版和安装版\r\n我用的安装版go1.9.2.darwin-amd64.pkg (97MB)\r\n\r\n\r\nMac安装版下载后双击可以看到安装界面，\r\n按照提示一步步选择操作即可。\r\n安装版默认安装目录是/usr/local/go，\r\n并且也会自动的把/usr/local/go/bin目录加入到PATH环境变量中，\r\n重新打开一个终端，\r\n就可以使用go version进行测试了。\r\n\r\n```shell\r\nexport GOROOT=/usr/local/go\r\nexport PATH=$PATH:$GOROOT/bin\r\n```\r\n下面2个手动加\r\n```shell\r\nexport GOBIN=$GOPATH/bin\r\nexport PATH=$PATH:$GOBIN\r\n```\r\n奇怪的是上述自动写入配置写哪里去了，我没有再下列所有配置中找到\r\n/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc\r\n\r\n\r\n>3.配置GOPATH 参考http://www.jianshu.com/p/4e699ff478a5\r\n\r\n```shell\r\n$cd ~\r\n$mkdir gopath\r\n```\r\n\r\n>4.在~/.bash_profile中添加如下语句:\r\n\r\n```shell\r\n$vi ~/.bash_profile\r\n```\r\n```shell\r\n# go path   \r\nexport GOPATH=$HOME/gopath\r\nexport PATH=$PATH:$GOPATH/bin\r\n\r\n```\r\n```shell\r\n$source ~/.bash_profile\r\n```\r\n\r\n>5.go编辑器下载\r\nhttps://www.jetbrains.com/go/download/download-thanks.html?platform=mac\r\n\r\n安装完成打开编辑器\r\n有2个选项第一个是选择默认工作路径配置\r\n结果报下面错误\r\n dose not appear to be goland config folder or installation home\r\n似乎不是goland config文件夹或安装的家\r\n\r\n搞不懂于是\r\n选择第二个 Do not import settings\r\n\r\n然后上淘宝5元买个一年的激活码\r\n\r\n6.导入项目\r\n我的是 ～/gopath/src/wtf  \r\n编辑界面对应自己项目文件夹右键选择new->go file\r\n填写文件名，不用.go \r\n有2个选择分别会创建下面2个文件\r\n选择empty 巴拉巴拉 会有如下\r\n\r\n```go\r\npackage wtf\r\n```\r\n\r\n选择simper 巴拉巴拉 会有如下文件生成\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\n\r\n我的第一个程序\r\n```go\r\npackage main\r\n\r\nimport(\"fmt\")\r\nfunc main() {\r\n	fmt.Println(\"WTF\")\r\n}\r\n```\r\n编辑器直接运行\r\n￼\r\n或在命令提示行运行\r\n```shell\r\n$cd ～/gopath/src/wtf  \r\n$ go run psome.go \r\nWTF\r\n```\r\n\r\n>7.安装程序\r\n安装的意思，就是生成可执行的程序，以供我们使用，为此go为我们提供了很方便的install命令，可以快速的把我们的程序安装到$GOAPTH/bin目录下。\r\n$go install wtf/psome\r\n\r\n结果\r\ngo install: no install location for .go files listed on command line (GOBIN not set)\r\n\r\n原因是没有下面东东.bash_profile\r\n下面2个手动加,为文章的流畅，最开始已经提示要添加这些配置了\r\n\r\n```shell\r\nexport GOBIN=$GOPATH/bin\r\nexport PATH=$PATH:$GOBIN\r\n```\r\n```shell\r\n$psome\r\nWTF\r\n```\r\n3.会在～/gopath/src/wtf/bin/下面生成一个psome 的可执行文件\r\n\r\n视频地址  https://pan.baidu.com/s/1c2EWqS4\r\nhttp://wiki.jikexueyuan.com/project/learn-go-language/overview.html\r\n', '### mac go环境搭建1.92\r\n下列如无特殊说明\r\n$ 代码命令提示符\r\n～代表家目录\r\n学习资料https://pan.baidu.com/s/1bqUq0fP\r\n\r\n>1.到官网选择自己需要到安装包https://golang.org/dl/'), ('8', 'Mac composer 的安装', '1', '2018-01-29 04:39:46', '2018-01-29 04:39:59', ',2,', '1', null, '### Mac composer 的安装\r\n\r\n>参考网站；https://getcomposer.org/download/\r\n\r\n```shell\r\nphp -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\nphp -r \"if (hash_file(\'SHA384\', \'composer-setup.php\') === \'544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;\"\r\nphp composer-setup.php\r\nphp -r \"unlink(\'composer-setup.php\');\"\r\n```\r\n\r\n\r\n这样就搞定了\r\n\r\n使用\r\n到自己的某个项目目录(我的是~/www/composer_demo)\r\n初始化一个 composer\r\ncomposer init\r\n填写作者依赖等，初始化完成当前目录会多一个composer.json文件。\r\n\r\n假设我们现在要安装一个monolog  的依赖\r\n\r\n1.通过配置安装\r\n安装前先查找包\r\ncomposer search monolog\r\n查看包信息\r\ncomposer show --all monolog/monolog\r\n\r\n\r\nvi composer.json \r\n 将require  编辑如下\r\n\r\n\"require\": {\r\n    \"monolog/monolog\":\"dev-master\"\r\n    }\r\n\r\n```shell\r\ncomposer install\r\n```\r\n安装完成目录下会多一个文件夹跟一个文件\r\ncomposer.lock   vendor/\r\n\r\n\r\n2.直接通过指令安装\r\n```shell\r\ncomposer require  symfony/http-foundation\r\n```\r\n\r\n安装完成后，我们可以查看之前composer.json require自动变成如下\r\n\r\n    \"require\": {\r\n    \"monolog/monolog\":\"dev-master\",\r\n        \"symfony/http-foundation\": \"^3.3\"\r\n    }\r\n\r\n3.编辑composer.json  并跟新omposer\r\nrequire 编辑如下\r\n```shell\r\n\"require\": {\r\n        \"symfony/http-foundation\": \"^3.3\"\r\n    }\r\n```\r\n\r\n```shell\r\ncomposer update\r\n```\r\n\r\n可以看到 当前目录下的 vendor/monolog 文件夹被清空                ', '### Mac composer 的安装\r\n\r\n>参考网站；https://getcomposer.org/download/\r\n\r\n```shell\r\nphp -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\nphp -r \"if (hash_file(\'SHA384\', \'composer-setup.php\') === \'544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;\"\r\nphp composer-setup.php\r\nphp -r \"unlink(\'composer-setup.php\');\"\r\n```                '), ('9', '推送PHP报错', '1', '2018-01-29 04:56:43', null, ',2,', '1', null, '### mac xdebug 安装\r\n\r\n其中由于安装的是最新的xdebug-2.5.5 ，PHP用的是54版本过低有点曲折，不想走弯路请直接安装5.5以上版本PHP\r\n或者用\r\n\r\n\r\n参考文献1\r\nhttp://www.cnblogs.com/findgor/p/4886652.html\r\n\r\n所以直接官网http://xdebug.org/download.php\r\n选择 source   files/xdebug-2.5.5tgz 下载下来\r\n\r\n\r\n丢到   ~/www/xdebug-2.5.5.tgz\r\n解压\r\n```shell\r\ntar -xzf  xdebug-2.5.5.tgz\r\ncd xdebug-2.5.5\r\n```\r\nphpize 这里我用的 sudo phpize \r\n如果报错没安装autoconf的话就 \r\n执行  \r\n```shell\r\nbrew install autoconf \r\n\r\n./configure --enable-xdebug\r\n```\r\n\r\n测试一下\r\n```shell\r\nmake test\r\n```\r\n\r\nphp --ini   找到php.ini文件位置\r\n php.ini末尾加入\r\n```shell\r\n[xdebug]\r\n;zend_extension=\"/usr/local/Cellar/php55/5.5.38_12/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so\"\r\nzend_extension=\"xdebug.so\"\r\nxdebug.remote_enable=1\r\nxdebug.remote_host=localhost\r\nxdebug.remote_port=9000\r\nxdebug.remote_autostart=1\r\n```\r\n\r\n\r\n```shell\r\nsudo /usr/local/Cellar/php55/5.5.38_12/sbin/php55-fpm restart\r\n```\r\n\r\n\r\n访问下面代码就可以看到了\r\n\r\n    <?php\r\n    phpinfo();\r\n\r\n又是年少无知redis要有对应版本\r\n```shell\r\nbrew install homebrew/php/php55-redis\r\n```\r\n\r\n当时年少无知PHP是54版本执行 ./configure --enable-xdebug  输出当中有这个\r\nchecking Check for supported PHP versions... configure: error: not supported. Need a PHP version >= 5.5.0 and < 7.2.0 (found 5.4.45)\r\n\r\n啊～～～PHP版本过低，参考后面内容进行解决，为了整体笔记效果这里继续进行解决版本之后的操作内容\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n参考另外的文献2，安装多版本PHP\r\nhttps://www.leocode.net/article/index/26.html\r\n\r\n```shell\r\nbrew unlink php54\r\n```\r\n\r\n发现根本就执行不了这个指令再转文献3\r\n\r\nhttps://ifunbox.top/mac_osx_brew_php_version\r\n\r\n先要执行这2个指令就可以了\r\n\r\n```shell\r\nbrew install php-version\r\n```\r\n\r\n然后运行\r\n```shell\r\nsource $(brew --prefix php-version)/php-version.sh php-version 5\r\n```\r\n\r\n下面指令就会成功\r\n```shell\r\nbrew unlink php54 \r\n```\r\n\r\n继续参考文献2\r\nhttps://www.leocode.net/article/index/26.html\r\n\r\n5.6的配置文件在/usr/local/etc/php/5.6/php-fpm.conf\r\n7.0的配置文件在/usr/local/etc/php/7.0/php-fpm.d/www.conf\r\n修改这两个配置文件查找9000字样，修改成不同的端口，我这里修改成了9056和9070端口\r\n然后同时启动两个php-fpm\r\n/usr/local/Cellar/php56/5.6.29_5/sbin/php56-fpm start\r\n/usr/local/Cellar/php70/7.0.14_7/sbin/php70-fpm start\r\n修改ngxin的配置文件\r\nfastcgi_pass 127.0.0.1:9000;\r\n\r\n改为\r\nfastcgi_pass 127.0.0.1:9070;\r\n如果是5.6版本就改成9056即可，搞定。重启nginx。 \r\n如果想关掉所有php-fpm进程，就执行\r\nsudo killall php-fpm\r\n\r\n\r\n```shell\r\n我就不折腾了，直接\r\nsudo killall php-fpm \r\n```\r\n然后启动我想启动的那个版本\r\n\r\n```shell\r\n[xdebug]\r\n;zend_extension=\"/usr/local/Cellar/php55/5.5.38_12/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so\"\r\nzend_extension=\"xdebug.so\"\r\n\r\n\r\nxdebug.default_enable = On        ;如果此设置为1，则默认情况下将在错误事件上显示堆栈跟踪。\r\n;xdebug.remote_connect_back = On   ;如果开启此，将忽略下面的 xdebug.remote_host     \r\n;xdebug.remote_host = 127.0.0.1;注意这里是，客户端的ip<即IDE的机器的ip,不是你的web server>    \r\n;xdebug.remote_port = 9001         ;注意这里是，客户端的端口<即IDE的机器的ip,不是你的web server    \r\n;xdebug.remote_enable = On         ;该开关控制Xdebug试图与调试客户端通讯\r\n;xdebug.remote_handler = dbgp;     ;2.1版本后唯一可用通信协议\r\nxdebug.remote_log = \"/tmp/traces/xdebug.log\"\r\n;xdebug.remote_req =req;           ;一旦脚本启动就尝试链接客户端，而不是报错了再链接\r\nxdebug.auto_trace = On            ;自动开启调试\r\n;xdebug.remote_autostart = On      ;Xdebug将始终尝试启动远程调试会话并尝试连接到客户端\r\nxdebug.collect_vars = On           ;此设置告诉Xdebug收集在某个范围内使用哪些变量的信息。\r\nxdebug.collect_return = On         ;此设置默认为0，控制Xdebug是否应将函数调用的返回值写入跟踪文件。\r\nxdebug.collect_params = 4          ;此设置默认为0，Xdebug是否应收集传递给函数的参数。\r\n;xdebug.var_display_max_depth = 15  ;显示变量时，可以控制数组元素和对象属性的嵌套级数。\r\n;xdebug.show_local_vars = 1\r\nxdebug.dump_undefined = 1\r\nxdebug.profiler_enable = 1         ;启用Xdebug的概要分析器，它在配置文件输出目录中创建文件 。\r\nxdebug.trace_format = 0            ;跟踪文件的格式。0,1,2\r\nxdebug.trace_options = 0           ;当设置为“1”时，跟踪文件将被附加，而不是在后续请求中被覆盖。\r\n;xdebug.idekey=_www;\r\n;output_buffering = Off\r\n```\r\n\r\n>我用的配置是\r\n\r\n```shell\r\n[xdebug]\r\n;zend_extension=\"/usr/local/Cellar/php55/5.5.38_12/lib/php/extensions/no-debug-non-zts-20121212/xdebug.so\"\r\nzend_extension=\"xdebug.so\"\r\nxdebug.default_enable = On  ;如果此设置为1，则默认情况下将在错误事件上显示堆栈跟踪。\r\nxdebug.show_exception_trace = On  ;当此设置设置为1时，每当异常或错误发生时，Xdebug将显示堆栈跟踪 - 即使该异常或错误实际被捕获。\r\nxdebug.show_local_vars = 1  ;Xdebug在错误情况下生成堆栈转储也将显示最多范围内的所有变量。\r\nxdebug.max_nesting_level = 50  ;类型：整数，默认值：256,控制无限递归保护的保护机制。\r\nxdebug.var_display_max_depth = 6  ;显示变量时，可以控制数组元素和对象属性的嵌套级数。\r\n  \r\nxdebug.dump_once = On  \r\nxdebug.dump_globals = On  \r\nxdebug.dump_undefined = On  \r\nxdebug.dump.REQUEST = *  \r\nxdebug.dump.SERVER = REQUEST_METHOD,REQUEST_URI,HTTP_USER_AGENT  \r\n  \r\nxdebug.trace_options = 0           ;当设置为“1”时，跟踪文件将被附加，而不是在后续请求中被覆盖。\r\nxdebug.trace_format = 0             ;跟踪文件的格式。0,1,2\r\nxdebug.auto_trace = 0              ;当此设置设置为开启时，将在脚本运行之前启用跟踪功能调用。\r\nxdebug.trace_output_dir = /var/tmp/xdebug/\r\nxdebug.trace_output_name = xdebug.log  \r\n  \r\nxdebug.collect_params = 4  ;此设置默认为0，Xdebug是否应收集传递给函数的参数。\r\nxdebug.collect_includes = On  ;是否记录include\r\nxdebug.collect_return = On      ;是否记录返回值\r\nxdebug.show_mem_delta = On  ;显示函数调用之间内存使用的差异。\r\n```\r\n\r\n>原计划是xdebug 跟tcp直接通信，然后tcp转发给ws，ws推送到页面，跟xdebug通信那个协议找不到相关文献，琢磨了2天也没什么有价值的东西，果断放弃，用另一个思路\r\n\r\n>xdebug 直接将打印信息写到文件xdebug.log.xt中，利用 \r\n\r\n```shell\r\ntail -f -1 /var/tmp/xdebug/xdebug.log.xt |nc 127.0.0.1 9001  \r\n```\r\n\r\n这个指令将文件内容转发给tcp, tcp 再转发给ws,ws推送到页面\r\n\r\n这个指令之前先创建这个文件并给予权限\r\n```shell\r\ntouch /var/tmp/xdebug/xdebug.log.xt\r\nchomd 777 /var/tmp/xdebug/xdebug.log.xt\r\n```\r\n\r\n```shell\r\nxdebug.auto_trace = On 默认开启改成0 (代码里面加xdebug_start_trace()开启)\r\n改了配置要记得重启PHP\r\nsudo /usr/local/Cellar/php55/5.5.38_12/sbin/php55-fpm restart\r\n```\r\n\r\n根据需要再代码中加判断是否开启报错\r\n```php\r\n<?php\r\nif(true){\r\n	xdebug_start_trace();  \r\n}\r\n```\r\n\r\n还原54版本\r\n\r\n```shell\r\nsudo killall php-fpm\r\n\r\nsudo /usr/local/Cellar/php54/5.4.45_6/sbin/php54-fpm start\r\n```\r\n出现下面错误，是因为跟新了啥东西导致的\r\ndyld: Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib\r\n\r\n解决办法\r\n```shell\r\nsudo ln -s /usr/local/Cellar/jpeg/8d/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib\r\n```\r\n参考文献https://zmis.me/detail_1143\r\n\r\n今天不知道什么鬼\r\n```shell\r\nsudo killall php-fpm   提示没有这个指令\r\n brew unlink php54\r\nsudo /usr/local/Cellar/php54/5.4.45_6/sbin/php54-fpm  stop\r\nsudo /usr/local/Cellar/php55/5.5.38_12/sbin/php55-fpm restart\r\n```\r\nphp-version 重启电脑无法用了\r\n下面2个方案可以解决\r\n```shell\r\n# Homebrew (recommended)\r\nsource $(brew --prefix php-version)/php-version.sh && php-version 5\r\n```\r\n```shell\r\n# non-Homebrew\r\nsource $HOME/local/php-version/php-version.sh && php-version 5\r\n```', '### mac xdebug 安装\r\n\r\n其中由于安装的是最新的xdebug-2.5.5 ，PHP用的是54版本过低有点曲折，不想走弯路请直接安装5.5以上版本PHP\r\n或者用\r\n\r\n\r\n参考文献1\r\nhttp://www.cnblogs.com/findgor/p/4886652.html'), ('10', '解决mysql5.7 group报错', '1', '2018-01-29 05:18:58', null, ',1,', '1', null, '### 解决mysql5.7 group报错\r\n\r\n```shell\r\nvi /usr/local/etc/my.cnf \r\n```\r\n```shell\r\nsql_mode = NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\r\n```\r\n\r\n解决乱码\r\nhttp://blog.csdn.net/chenyubo1996/article/details/52040487\r\n\r\n\r\n开启日志\r\n\r\nmysql>SET GLOBAL general_log = \'ON\';  //注意是ON，不是on \r\n\r\n\r\n\r\n mysql>show variables like \'general_log_file\';\r\n\r\n\r\n>实时查看mysql日志\r\n\r\n```shell\r\ntail -f -n 10 对应日志路径\r\n```\r\n\r\n>查看日志\r\n\r\n```shell\r\ntail -f -n 20 /usr/local/var/mysql/$(whoami)deMacBook-Pro.log |sed \"s@^`date +%F`T.*Query@ @g\"\r\n```\r\n\r\n>清空日志\r\n\r\n```shell\r\necho > /usr/local/var/mysql/$(whoami)deMBP.log\r\n```\r\n\r\n本来是想在my.cnf里面定义日志路径的\r\nlog=\'/tmp/mysql_log/mylog.log\'\r\n结果mysql启动不了\r\n\r\n```sql\r\nupdate `database`.`table` set ip=CONCAT(ip,\'110.74.194.42\') where (ip REGEXP \'110.74.194.42\')=0;\r\n```\r\n\r\n\r\n\r\n基本正则表达式支持的元字符：\r\n```shell\r\n.           #匹配任意一个字符\r\n[]          #字符集匹配，匹配[]内任意一个字符\r\n[x-y]      #匹配指定范围内的一个字符\r\n[^]         #字符集否定匹配，匹配没有在方括号中定义的字符\r\n^           #匹配开头字符\r\n$           #匹配结尾字符\r\n*           #重复字符匹配（0---∞）\r\n+           #至少一次匹配（1---∞）\r\n|           #或运算\r\n?           #最多一次匹配（0/1）\r\n\r\n\r\n扩展正则表达式支持的元字符：\r\n\\(...\\)       #定义子表达式\r\n\\{m\\}       #表示 m 次精确匹配\r\n\\{m,\\}      #表示至少 m次匹配\r\n\\{m,n\\}     #至少 m 次，至多 n 次匹配\r\n```\r\n奇怪的是下面的还是不行\r\n```shell\r\ntail -f -n 20 /usr/local/var/mysql/pk002deMacBook-Pro.log |sed \'s@^2017-06-22T.*\\(Query|Connect\\)@ @g\'\r\n```\r\n\r\n', '### 解决mysql5.7 group报错\r\n\r\n```shell\r\nvi /usr/local/etc/my.cnf \r\n```\r\n```shell\r\nsql_mode = NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\r\n```'), ('11', 'angularJS 前后版本的不同', '1', '2018-01-29 05:22:33', null, ',6,', '1', null, 'angularJS 前后版本的不同\r\n\r\n我看的是1.2版本的书籍用的angularJS的2.0版本的软件包，书上的某些例子用起来会报错\r\n\r\n一.$http请求\r\n\r\n1.6之前的请求是这样的\r\n```js\r\n$http.post(orderUrl, order)\r\n                .success(function (data) {\r\n                    $scope.data.orderId = data.id;\r\n                    cart.getProducts().length = 0;\r\n                })\r\n                .error(function (error) {\r\n                    $scope.data.orderError = error;\r\n                }).finally(function () {\r\n                    $location.path(\"/complete\");\r\n                });\r\n```\r\n\r\n之后的版本废除了success error\r\n\r\n正确姿势改为\r\n```js\r\n $http.post(orderUrl,order)\r\n                    .then(function (data) {\r\n                        $scope.data.orderId = data.id;\r\n                        cart.getProducts().length = 0;\r\n                    })\r\n                    .catch(function (error) {\r\n                        $scope.data.orderError = error;\r\n                    }).finally(function () {\r\n                        $location.path(\"/complete\");\r\n                    });\r\n```\r\n二.自定义路由\r\n\r\n之前版本是\r\nhref=“#/products\"\r\n\r\n\r\n从那个版本开始我不清楚，总之2.0版本如下\r\n\r\nhref=\"#!products\"\r\n\r\n\r\n三.checkbox不支持 ng-true-value和ng-false-value\r\n```html\r\n<input name=\"sample\" type=\"checkbox\" \r\nng-model=\"inputValue\"\r\nng-true-value=\"Hurrah!\" \r\nng-false-value=\"Boo!\">\r\n```\r\n\r\n\r\n\r\n', 'angularJS 前后版本的不同\r\n\r\n我看的是1.2版本的书籍用的angularJS的2.0版本的软件包，书上的某些例子用起来会报错\r\n\r\n一.$http请求'), ('12', '数据库隔离级别', '1', '2018-01-29 05:24:21', null, ',1,', '1', null, '数据库隔离级别\r\n\r\n>1. 脏读 READ_UNCOMMITTED\r\n\r\n事务2更改了数据（把数据弄脏了）尚未提交被事务1读取了。\r\n\r\n例子：事物2修改了第一条数据尚未提交\r\n	   事物1读取了第一条数据（事务2，可能回滚）\r\n\r\n\r\n为了避免脏读的问题，我们限制一下，修改的数据不提交不能被读取，或者说等我修改提交了你才能读取。\r\n\r\n>2. 不可重复读 READ_COMMITTED\r\n\r\n但是还是有问题，比如事物1读取了数据，这个时候事物2修改了刚刚事物1读取的数据并提交事物2，事物1再次去读取数据的时候就发现跟第一次读取的数据不一致了\r\n\r\n例子： 事物1读取了用户A余额为1000元\r\n	    事务2用户A消费了1000元，余额变成了0,事务完成提交。\r\n            事务1再次读取第一条数据，发现前后不一致（如果此时是别人给用户A汇款1000，如果事务1不知道事务2，以为会员还有1000元，就变成1000+1000，会员A账户变成2000元了）\r\n\r\n\r\n\r\n为了避免不可重复读，我们再限制一下，只要事物开启，其它事物不能读取或修改相关当前事务数据\r\n\r\n>3.幻读   REPEATABLE_READ\r\n\r\n看似相当完美了，但是如果我想count一下一共有多少数据，这个时候其它事物的确是不能修改并读取所有数据，但是并不能限制其它事务添加新数据，好比你跟新所有用户余额全部为0，但是另一个事物添加了一个会员，给该会员额度设置为10，对应事物1来说说，它好像看到了幻觉，怎么跟新了全部还有一个会员的额度是10.\r\n\r\n\r\n例子：事务1，update所有表中A字段数据为0，未提交事务\r\n	   事务2，添加了一条新的数据A字段为10，提交\r\n	   事务1 再次sum(A)发现为10\r\n\r\n为了避免幻读，我整个表都锁了\r\n\r\n>4.序列化异常  SERIALIZABLE\r\n\r\n这个隔离级别是最高的，并发能力最弱\r\n\r\n\r\n\r\nIsolation 属性一共支持五种事务设置，具体介绍如下：\r\nDEFAULT 使用数据库设置的隔离级别 ( 默认 ) ，由 DBA 默认的设置来决定隔离级别 .\r\nREAD_UNCOMMITTED 会出现脏读、不可重复读、幻读 ( 隔离级别最低，并发性能高 )\r\nREAD_COMMITTED  会出现不可重复读、幻读问题（锁定正在读取的行）\r\nREPEATABLE_READ 会出幻读（锁定所读取的所有行）\r\nSERIALIZABLE 保证所有的情况不会发生（锁表）\r\n', '数据库隔离级别\r\n\r\n>1. 脏读 READ_UNCOMMITTED\r\n\r\n事务2更改了数据（把数据弄脏了）尚未提交被事务1读取了。\r\n\r\n例子：事物2修改了第一条数据尚未提交\r\n	   事物1读取了第一条数据（事务2，可能回滚）'), ('13', '用SQL写SQL', '1', '2018-01-29 05:32:12', null, ',1,', '1', null, '### sql 写SQL\r\n\r\n偶尔会遇到，要修复或更一些数据，但是这些数据又关联了其它表，方式有好几种\r\n1.写一个超级牛逼的SQL，数据库可能会跑挂\r\n2.写一个程序查询数据循环跟新\r\n3.就是用SQL写SQL\r\n\r\n\r\nconcat、concat_ws这个更好第一个参数是拼接符用‘’，就完全能避免 concat如果其中一个null就会返回null 的尴尬\r\n\r\nSELECT concat( \"UPDATE user set num =\'\" , num , \"\' where ag=\'apg\' and index=\'a\' and name=\'\" , name , \"\' and reg_date>=\'\' and reg_date<= \'\';\") FROM k_user WHERE ag = \'someag\' AND index = \'a\' ;\r\n\r\n顺便提一个其它技巧，一些SQL判断技巧\r\nif not  exists (select b.name from user as b where  b.ag =‘xxx’\r\nAND b.index= ‘x’ )', '### sql 写SQL\r\n\r\n偶尔会遇到，要修复或更一些数据，但是这些数据又关联了其它表，方式有好几种\r\n1.写一个超级牛逼的SQL，数据库可能会跑挂\r\n2.写一个程序查询数据循环跟新\r\n3.就是用SQL写SQL'), ('14', 'awk 指令 解决替换SQL', '1', '2018-01-29 05:35:28', '2018-01-29 05:35:35', ',4,', '1', null, '### awk 指令 解决替换SQL\r\n1.解决一个SQL整理的功能\r\n之前的错误SQL，有几千条吧\r\n```sql\r\nupdate user where `pwd` = \'14e1b600b1fd579f47433b88e8d85291\' and `name` = \'pk123\' set `pwd` = \'130811dbd239c97bd9ce933de7349f20\';\r\n```\r\n\r\n\r\n经过下面的处理要变成\r\n```sql\r\nupdate k_user set `pwd` = \'130811dbd239c97bd9ce933de7349f20\' where `pwd` = \'14e1b600b1fd579f47433b88e8d85291\' and `name` = \'pk123\';\r\n```\r\n\r\n思路先将最后的;去掉 替换成空格 aa  管道传给awk 进行字段从新排序输出最后追加一个;\r\n为什么要这样 替换成空格aa\r\n1.去掉；\r\n2.添加一个字段 （因为发现awk指令将最后一个字段挪到前面就不能正确输出，于是加一个字段）\r\n\r\n```shell\r\ncat /Users/pk002/work/before.sql | sed \"s/[;]/ aa/g\" | awk \'{print $1,$2,$11,$12,$13,$14,$3,$4,$5,$6,$7,$8,$9,$10\";\"}\' >> some.sql\r\n```                ', '### awk 指令 解决替换SQL\r\n1.解决一个SQL整理的功能\r\n之前的错误SQL，有几千条吧\r\n```sql\r\nupdate user where `pwd` = \'14e1b600b1fd579f47433b88e8d85291\' and `name` = \'pk123\' set `pwd` = \'130811dbd239c97bd9ce933de7349f20\';\r\n```                '), ('15', 'mac安装Cyberduck的Linux配置', '1', '2018-01-29 05:46:05', '2018-01-30 03:14:40', ',3,', '1', null, '### mac安装Cyberduck的Linux配置\r\n百度了一下mac有很多，但是都不是推荐的图形化的，最后我还是找了一个图形化的工具\r\n之前去的爱情守望-太坑了，下载了一个下载盘工具\r\nCyberduck\r\n下面地址可以，最新的版本5.4.4要付费，我选择的4.8.4免费版的\r\nhttp://soft.macx.cn/3121.htm\r\n\r\n```shell\r\nnetstat -tnlp\r\n```\r\n\r\n缺少ftp服务\r\n运维推荐了一个WDCP一键安装\r\n常考网址http://www.cnblogs.com/xiongpq/p/3384759.html\r\n#### 一：安装vsftpd\r\n查看是否已经安装vsftpd\r\n```shell\r\nrpm -qa | grep vsftpd\r\n```\r\n如果没有，就安装，并设置开机启动\r\n```shell\r\nyum -y install vsftpd\r\nchkconfig vsftpd on\r\n```\r\n\r\n#### 二：基于虚拟用户的配置\r\n所谓虚拟用户就是没有使用真实的帐户，只是通过映射到真实帐户和设置权限的目的。虚拟用户不能登录CentOS系统。\r\n修改配置文件\r\n打开/etc/vsftpd/vsftpd.conf，做如下配置\r\n\r\n最终添加内容如下\r\n```shell\r\n###for ftp set start\r\nanonymous_enable=NO\r\n#设定不允许匿名访问\r\n\r\nlocal_enable=YES\r\n#设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问\r\n\r\nchroot_list_enable=YES\r\n#使用户不能离开主目录\r\n\r\nascii_upload_enable=YES\r\n\r\nascii_download_enable=YES\r\n#设定支持ASCII模式的上传和下载功能\r\n#pam_service_name=vsftpd //PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证\r\n\r\nguest_enable=YES\r\n#设定启用虚拟用户功能\r\n\r\nguest_username=ftp\r\n#指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了\r\n\r\nuser_config_dir=/etc/vsftpd/vuser_conf\r\n#设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名\r\n###for ftp set end\r\n```\r\n进行认证\r\n首先，安装Berkeley DB工具，很多人找不到db_load的问题就是没有安装这个包。\r\n```shell\r\nyum install db4 db4-utils\r\n```\r\n然后，创建用户密码文本/etc/vsftpd/vuser_passwd.txt ，注意奇行是用户名，偶行是密码\r\n```shell\r\nsome\r\npwd\r\n```\r\n接着，生成虚拟用户认证的db文件\r\n```shell\r\ndb_load -T -t hash -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db\r\n```\r\n随后，编辑认证文件/etc/pam.d/vsftpd，全部注释掉原来语句，再增加以下两句：\r\n```shell\r\nauth required pam_userdb.so db=/etc/vsftpd/vuser_passwd\r\naccount required pam_userdb.so db=/etc/vsftpd/vuser_passwd\r\n```\r\n最后，创建虚拟用户配置文件\r\n```shell\r\nmkdir /etc/vsftpd/vuser_conf/\r\nvi /etc/vsftpd/vuser_conf/test  //文件名等于vuser_passwd.txt里面的账户名，否则下面设置无效\r\n```\r\n内容如下\r\n```shell\r\n#虚拟用户根目录,根据实际情况修改\r\nlocal_root=/ftp/www  \r\nwrite_enable=YES\r\nanon_umask=022\r\nanon_world_readable_only=NO\r\nanon_upload_enable=YES\r\nanon_mkdir_write_enable=YES\r\nanon_other_write_enable=YES\r\n```\r\n\r\n设置Selinux  运维盆友说关闭Selinux 的情况下可以跳过，我跳过了\r\n```shell\r\nsetsebool -P ftp_home_dir=1   //设置ftp可以使用home目录\r\nsersebool -P allow_ftpd_full_access=1   //设置ftp用户可以有所有权限\r\n```\r\n设置FTP根目录权限\r\n```shell\r\nmkdir /ftp/www   \r\nchmod -R 755 /ftp\r\nchmod -R 777 /ftp/www\r\n```\r\n最新的vsftpd要求对主目录不能有写的权限所以ftp为755，主目录下面的子目录再设置777权限\r\n\r\n\r\n设置防火墙  —因为没有开启防火墙，没有下面目录，运维盆友说不用设置\r\n打开/etc/sysconfig/iptables\r\n在“-A INPUT –m state --state NEW –m tcp –p –dport 22 –j ACCEPT”，下添加：\r\n-A INPUT -m state --state NEW -m tcp -p -dport 21 -j ACCEPT\r\n然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：\r\nservice iptables restart\r\n\r\n运行FTP\r\nOK，运行“service vsftpd start”，你就可以访问你的FTP服务器了。\r\n如果出现启动报错：Starting vsftpd for vsftpd: 500 OOPS: config file not owned by correct user, or not a file\r\n/etc/vsftpd/vsftpd.conf文件属主不对：\r\n```shell\r\nchown -R root:root /etc/vsftpd\r\n```\r\n再次启动就可以了hin奇怪，之前明明都启动过的\r\n\r\n\r\n然后连接报错\r\n500 OOPS: could not read chroot() list file:/etc/vsftpd/chroot_list\r\n参考下面网址解决\r\nhttp://blog.csdn.net/duomoke/article/details/30263483\r\n出错原因：用户没有变更根目录的权限。\r\n                    ftp用户默认的根目录是/home/ftp,如果要切换登陆目录，需要给予权限\r\n解决方法：\r\n第一步，\r\n加了会报错最后注释掉了\r\n打开/etc/vsftpd/vsftpd.conf,做如下配置：\r\n```shell\r\nchroot_local_user=YES  \r\nchroot_list_enable=YES  \r\nchroot_list_file=/etc/vsftpd.chroot_list  \r\n```\r\n\r\n 第二步，\r\n  在/etc/vsftpd下新建chroot_list,加入登陆用户的名字。\r\n\r\n改配置要重启服务\r\n```shell\r\nservice vsftpd restart\r\n```\r\n\r\nuser 账号各种问题，只能上传文件夹不能上传文件\r\n改用sftp 然后用root账号，万事大吉\r\n                                ', '### mac安装Cyberduck的Linux配置\r\n百度了一下mac有很多，但是都不是推荐的图形化的，最后我还是找了一个图形化的工具\r\n之前去的爱情守望-太坑了，下载了一个下载盘工具\r\nCyberduck\r\n下面地址可以，最新的版本5.4.4要付费，我选择的4.8.4免费版的\r\nhttp://soft.macx.cn/3121.htm\r\n\r\n```shell\r\nnetstat -tnlp\r\n```'), ('16', '如何用shell脚本自动配置域名', '1', '2018-01-29 05:54:49', null, ',3,4,', '1', null, '### 如何用shell脚本自动配置域名\r\n一.创建nginx模版文件\r\n```shell\r\ncd ~\r\nmkdir shell\r\nvi template.conf #编辑如下内容作为模版\r\n```\r\n```shell\r\nserver {\r\n        listen 80;\r\n        server_name  template.com;\r\n        root \"/some/template/path\";\r\n        location / {\r\n            index  index.html index.htm index.php;\r\n            try_files $uri $uri/ /index.php;\r\n        }\r\n        location ~ \\.php(.*)$ {\r\n            fastcgi_pass   127.0.0.1:9000;\r\n            fastcgi_index  index.php;\r\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\r\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\r\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\r\n            include        fastcgi_params;\r\n        }\r\n}\r\n```\r\n\r\n二.写shell脚本自动复制模版根据参数替换nginx配置\r\nshell内容如下\r\n```shell\r\n#!/bin/bash\r\n#\r\nif [ $# -ne 2 ];then\r\n	echo \"Usage : `basename $0` somehost.com /you/app/path\"\r\n	exit 4\r\nfi\r\n\r\nif  [ ! -d $2 ] ;then\r\n	echo -e \"please check you path,not find $2\\nUsage : `basename $0` somehost.com /you/app/path\"\r\nexit 3\r\nfi\r\n\r\necho \"127.0.0.1       $1\" >> /etc/hosts\r\n\r\necho \"$1 host add to /etc/hosts successful!\"\r\n\r\ncat /root/shell/template.conf | sed s@template.com@\"$1\"@ |sed s@/some/template/path@\"$2\"@ > /etc/nginx/conf.d/${1}.conf\r\nif [ $? -eq 0 ];then\r\n	echo -e \"touch ${1}.conf successful!\\nplease sudo nginx -s reload\"\r\nelse\r\n	echo \"can\'t touch ${1}.conf\"\r\nfi\r\n```\r\n\r\n给脚本执行权限\r\n```shell\r\nchmod 744 mk_host.sh\r\n```\r\n测试配置脚本\r\n```shell\r\n# ./mk_host.sh \r\nUsage : mk_host.sh somehost.com /you/app/path\r\n```\r\n完成了，第一个参数书域名，第二个参数是配置地址\r\n\r\n脚本大体思路是，\r\n1.先检查参数是否正确\r\n2.检查路径是否存在\r\n3.将域名追加至/etc/hosts\r\n4.将模版内容提取出来通过管道，替换膜拜域名template.com为第1个参数，替换模版地址/some/template/path为为第2个参数\r\n\r\n\r\n三.让脚步可以像指令一样执行，将shell地址添加到环境变了PAHT\r\n```shell\r\nvi ~/.bash_profile 添加下面内容\r\n```\r\n```shell\r\n# [my shell]\r\nexport PATH=$PATH:~/shell\r\n```\r\n让刚刚修改内容从新加载至内存\r\n```shell\r\nsource ~/.bash_profile\r\n```\r\n测试指令\r\n```shell\r\nmk_host\r\nUsage : mk_host somehost.com /you/app/path\r\n```', '### 如何用shell脚本自动配置域名\r\n一.创建nginx模版文件\r\n```shell\r\ncd ~\r\nmkdir shell\r\nvi template.conf #编辑如下内容作为模版\r\n```'), ('17', '一个web页面的诞生', '1', '2018-01-29 06:07:35', '2018-01-30 03:16:33', ',14,', '1', null, '### 正确工作流程\r\n1 产品了解需求进行需求评审。\r\n2 对过审的需求进行原型设计。（包含交互）\r\n3 对原型进行初步审稿\r\n4 审核不过继续进行前序工作\r\n5 审核通过的原型图交付UI\r\n6 UI设计完成后审核\r\n7 审核不过继续进行6\r\n8 前端根据审核通过的效果图做页面                                \r\n\r\n```flow\r\nst=>start: Start\r\ne=>end: end\r\nop1=>operation: 1.产品了解需求进行需求评审\r\nop2=>operation: 2.对过审的需求进行原型设计。（包含交互）\r\nsub1=>subroutine: 4.审核不过继续\r\ncond=>condition: 3.对原型进行初步审稿 \r\nop5=>operation: 5.审核通过的原型图交付UI\r\ncond2=>condition: 6.UI设计完成后审核\r\n\r\nsub2=>subroutine: 7.审核不过继续进行前序工作\r\nop8=>operation: 8.前端根据审核通过的效果图做页面\r\n\r\nst->op1->op2->cond->op5->cond2\r\ncond(yes)->op5->cond2\r\ncond(no)->sub1(right)->op2\r\ncond2(yes)->op8->e\r\ncond2(no)->sub2(right)->op5->cond2\r\n```\r\n                                                ', '### 正确工作流程\r\n1 产品了解需求进行需求评审。\r\n2 对过审的需求进行原型设计。（包含交互）\r\n3 对原型进行初步审稿\r\n4 审核不过继续进行前序工作\r\n5 审核通过的原型图交付UI\r\n6 UI设计完成后审核\r\n7 审核不过继续进行6\r\n8 前端根据审核通过的效果图做页面                                '), ('18', 'python 连接RabbitMQ', '1', '2018-01-29 06:58:30', '2018-01-29 11:16:10', ',10,', '1', null, '### python 连接RabbitMQ\r\n\r\n分成4个文件\r\n1.连接配置文件globalConfig.py\r\n2.RabbtiMQ连接包\r\n3.监听RabbtiMQ使用例子testListen.py\r\n4.发送消息给RabbtiMQ例子testPush.py\r\n\r\n>1.globalConfig.py\r\n\r\n```python\r\n\'\'\'\r\nCreated on 2016-3-24\r\n\r\n@author: handsome\r\n\'\'\'\r\n#!/user/bin/python\r\n#Filename:globalConfig.py\r\n# -*- coding: utf-8 -*-\r\n#encoding=utf-8\r\n\r\nRMQ_HOST     = \'localhost\'\r\nRMQ_PORT     = 5672\r\nRMQ_USERNAME     = \'guest\'\r\nRMQ_PASSWORD     = \'guest\'\r\n```\r\n\r\n>2.RabbtiMQ连接包\r\n\r\n```python\r\n\'\'\'\r\nCreated on 2016-3-24\r\n\r\n@author: handsome\r\n\'\'\'\r\n#!/usr/bin/env python\r\n#coding=utf8\r\nimport globalConfig\r\nimport pika\r\n\r\n#监听queue队列消息，并且将收集到的消息用func函数处理\r\ndef RMQlisten(queue,func):\r\n    credentials = pika.PlainCredentials(RMQ_USERNAME, RMQ_PASSWORD)\r\n    #这里可以连接远程IP，请记得打开远程端口\r\n    parameters = pika.ConnectionParameters(RMQ_HOST,RMQ_PORT,\'/\',credentials)\r\n    connection = pika.BlockingConnection(parameters)\r\n    channel = connection.channel()\r\n    channel.queue_declare(queue=queue, durable=True)\r\n    print \'\'\' [*] Waiting for >>> \'\'\'+queue+\'\'\' >>> messages. To exit press CTRL+C \\n\'\'\'\r\n\r\n    def callback(ch, method, properties, body):\r\n        print \" [x] Received %r\" % (body,)\r\n        func(body)\r\n        print \" [x] Done\"\r\n        ch.basic_ack(delivery_tag = method.delivery_tag)\r\n\r\n    channel.basic_qos(prefetch_count=1)\r\n    channel.basic_consume(callback,queue=queue)#正在执行的任务异常也不会丢失，rabbitmq会将任务重新分配给其他工作者\r\n\r\n    channel.start_consuming()\r\n\r\n#发送一个永久性消息函数\r\ndef RMQsent(queue,message,jq=\'\'):\r\n    credentials = pika.PlainCredentials(RMQ_USERNAME, RMQ_PASSWORD)\r\n    #这里可以连接远程IP，请记得打开远程端口\r\n    parameters = pika.ConnectionParameters(RMQ_HOST,RMQ_PORT,\'/\',credentials)\r\n    connection = pika.BlockingConnection(parameters)\r\n    channel = connection.channel()\r\n    channel.queue_declare(queue=queue, durable=True)#durable=True将队列设成永久性\r\n    channel.basic_publish(exchange=\'\',  #转发器，这里不需要\r\n                          routing_key=queue,\r\n                          body=message,\r\n                          properties=pika.BasicProperties(\r\n                             delivery_mode = 2, # make message persistent\r\n                          ))\r\n    print \" [x] Sent %r to %s \" % (message,queue,)\r\n    connection.close()\r\n```\r\n\r\n>3.接收消息的测试代码testListen.py\r\n\r\n```python\r\n\'\'\'\r\nCreated on 2016-5-5\r\n\r\n@author: handsome\r\n\'\'\'\r\n#!/user/bin/python\r\n# -*- coding: utf-8 -*-\r\n#encoding=utf-8\r\n\r\nimport globalConfig\r\nimport RMQbag\r\n\r\ntest_queue =\"my_queue\"                    #测试队列名\r\n\r\ndef justprint(queue_body):\r\n	print queue_body\r\n\r\ndef main(c):\r\n        RMQbag.RMQlisten(test_queue,justprint)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n>4.发送消息的测试代码testPush.py\r\n\r\n```python\r\n\'\'\'\r\nCreated on 2016-5-5\r\n\r\n@author: handsome\r\n\'\'\'\r\n#!/user/bin/python\r\n# -*- coding: utf-8 -*-\r\n#encoding=utf-8\r\n\r\nimport globalConfig\r\nimport RMQbag\r\n\r\ntest_queue =\"my_queue\"                    #测试队列名\r\n\r\n\r\ndef main(c):\r\n        kaijian = {\'ball1\':1,\"ball2\":2,\"ball3\":3,\"time\":\"2017-09-01 12:00:00\"}\r\n        RMQbag.RMQsent(test_queue,kaijian)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n                ', '### python 连接RabbitMQ\r\n\r\n分成4个文件\r\n1.连接配置文件globalConfig.py\r\n2.RabbtiMQ连接包\r\n3.监听RabbtiMQ使用例子testListen.py\r\n4.发送消息给RabbtiMQ例子testPush.py\r\n'), ('19', '手写一个yaf的ORM', '1', '2018-01-29 08:12:10', '2018-01-30 01:44:44', ',2,', '1', null, '### 手写一个yaf的ORM\r\n>了解一只青蛙的最好方式不是解刨一只青蛙，而是创造一只青蛙。\r\n\r\nyaf 扩展 ORM\r\n很多人很怀疑yaf，觉得功能不怎么齐全，会导致重复造轮子\r\n的确是这么一会事\r\n但是，仔细想想yaf最求的是极速当然会去掉一些没有用的功能，也让程序员有更多的想象空间，当然也要承受重复造轮子的痛苦，我不喜欢这种造轮子的感觉，但是我喜欢这种自己探索的感觉\r\n\r\n1.数据库连接DbConnect.php\r\n2.数据操作类Model.php\r\n3.model查询User.php\r\n4.控制器调用model方法查询，控制器直接查询Test.php\r\n\r\n目录结构\r\n	+ public\r\n		  |- Index.Php //入口文件\r\n		  |- .htaccess //重写规则    \r\n	+ conf\r\n		  |- application.ini //配置文件   \r\n	+ application\r\n		  |+ controllers\r\n		  		|- Index.php //默认控制器\r\n		  		|- Test.php //默认控制器\r\n		  |+ views    \r\n			 	|+ index   //控制器\r\n			 		|- index.phtml //默认视图\r\n		  |+ modules //其他模块\r\n		  |+ library //本地类库\r\n		  		|- DbConnect.php //数据库连接\r\n		  		|- Model.php //数据操作类\r\n		  |+ models  //model目录\r\n		  		|- User.php //用户查询操作类\r\n		  |+ plugins //插件目录\r\n\r\n1.数据库连接DbConnect.php\r\n```php\r\n<?php\r\nclass DbConnect{\r\n    private static $Instace = [];           ///对象\r\n    public static function getInstace($params){\r\n        if(!isset(static::$Instace[$params])){\r\n            static::$Instace[$params] = static::connectDb($params);\r\n        }\r\n        return static::$Instace[$params];\r\n    }\r\n    \r\n    public static function connectDb($params){\r\n        $config = Yaf_Registry::get(\'config\');\r\n        \r\n        $dbms   = $config->database->$params->type;\r\n        $host   = $config->database->$params->host;\r\n        $port   = $config->database->$params->port;\r\n        $dbName = $config->database->$params->name;\r\n        $user   = $config->database->$params->user;\r\n        $pass   = $config->database->$params->pwd;\r\n        \r\n        $dsn    = \"{$dbms}:host={$host};port={$port};dbname={$dbName}\";\r\n        \r\n        try {\r\n            $dbh = new PDO($dsn, $user, $pass); //初始化一个PDO对象\r\n            return $dbh;\r\n        } catch (PDOException $e) {\r\n            die (\"Error!: \" . $e->getMessage() . \"<br/>\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2.数据操作类Model.php\r\n\r\n```php\r\n<?php\r\nclass Model{\r\n    private $conn;\r\n    private $table;\r\n    private $sql;\r\n    private $whereBindParam=array();\r\n    private $options;\r\n    \r\n    public function __construct($params) {\r\n        $conn = DbConnect::getInstace($params);\r\n        $this->conn = $conn;\r\n    }\r\n    \r\n    public function getconn() {\r\n        return $this->conn;\r\n    }\r\n    \r\n    //在客户端感觉上Model是继承了PDO，其实是一种组合写法\r\n    public function __call($func, $arguments){\r\n        return call_user_func_array(array($this->conn,$func),array($arguments));\r\n    }\r\n    \r\n    public function table($table){\r\n        $this->table = $table;\r\n        return $this;\r\n    }\r\n    \r\n    public function insert($map){\r\n        if (!$map || !is_array($map)) {\r\n            return FALSE;\r\n        } else {\r\n            $fields = $values = array();\r\n\r\n            foreach ($map as $key => $value) {\r\n                $fields[] = \'`\' . $key . \'`\';\r\n                $values[] = \":{$key}\";\r\n            }\r\n\r\n            $fieldString = implode(\',\', $fields);\r\n            $valueString = implode(\',\', $values);\r\n\r\n            $this->sql = \'INSERT INTO \' . $this->table . \" ($fieldString) VALUES ($valueString)\";\r\n            $stmt = $this->conn->prepare($this->sql);\r\n            foreach ($map as $key => $value) {\r\n                ${$key} = $value;\r\n                $stmt->bindParam(\":{$key}\", ${$key});\r\n                //$stmt->bindValue(\":{$key}\", $value);\r\n            }\r\n            if ($this->run($stmt)) {\r\n                return $stmt->rowCount() ? $stmt->rowCount() : true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    public function getInsertId($name=\'\'){\r\n        return $this->conn->lastInsertId($name);\r\n    } \r\n    \r\n    /**\r\n     * Field\r\n     */\r\n    final public function field($field) {\r\n        if (!$field) {\r\n            return $this;\r\n        }\r\n\r\n        $str = \'\';\r\n        if (is_array($field)) {\r\n            foreach ($field as $val) {\r\n                $str .= \'`\' . $val . \'`, \';\r\n            }\r\n\r\n            $this->options[\'field\'] = substr($str, 0, strlen($str) - 2); // 2:　Cos there is a BLANK\r\n        } else {\r\n            $this->options[\'field\'] = $field;\r\n        }\r\n\r\n        unset($str, $field);\r\n        return $this;\r\n    }\r\n    \r\n    public function select(){\r\n        if (isset($this->options[\'field\'])) {\r\n            $field = $this->options[\'field\'];\r\n        } else {\r\n            $field = \'*\';\r\n        }\r\n\r\n        $this->sql = \'SELECT \' . $field . \' FROM `\' . $this->table . \'`\';\r\n        \r\n        if(isset($this->options[\'where\'])){\r\n            $this->sql.= \' WHERE \' . $this->options[\'where\'];\r\n        }\r\n        \r\n        if (isset($this->options[\'group\'])) {\r\n            $this->sql .= \' GROUP BY \' . $this->options[\'group\'];\r\n            if (isset($this->options[\'having\'])) {\r\n                $this->sql .= \' HAVING \' . $this->options[\'having\'];\r\n            }\r\n        }\r\n        \r\n        if (isset($this->options[\'order\'])) {\r\n            $this->sql .= \' ORDER BY \' . $this->options[\'order\'];\r\n        }\r\n        \r\n        if (isset($this->options[\'limit\'])) {\r\n            if(!is_numeric($this->options[\'limit\'])){\r\n                exit(\'delete 语句不支持limit \'.$this->options[\'limit\'].\' 请改成类似limit x\');\r\n            }\r\n            $this->sql .= \' LIMIT \' . $this->options[\'limit\'];\r\n        }\r\n        \r\n        $stmt = $this->conn->prepare($this->sql);\r\n        if ($this->run($stmt,$this->whereBindParam)){\r\n            return $result=$stmt->fetchAll(PDO::FETCH_ASSOC); \r\n        }\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    public function update($map, $update_all = false){\r\n        //如果是一个没有条件的跟新，那么必须指定这个是全部跟新\r\n        if (!$this->options[\'where\'] && $update_all) {\r\n            return FALSE;\r\n        }\r\n\r\n        if (!$map) {\r\n            return FALSE;\r\n        } else {\r\n            $this->sql = \'UPDATE `\' . $this->table . \'` SET \';\r\n            $sets = array();\r\n            $sets_value = array();\r\n            \r\n            foreach ($map as $key => $value) {\r\n                if (strpos($key, \'+\') !== FALSE) {\r\n                    list($key, $flag) = explode(\'+\', $key);\r\n                    $sets[] = \"`$key` = `$key` + ?\";\r\n                } elseif (strpos($key, \'-\') !== FALSE) {\r\n                    list($key, $flag) = explode(\'-\', $key);\r\n                    $sets[] = \"`$key` = `$key` - ?\";\r\n                } else {\r\n                    $sets[] = \"`$key` = ?\";\r\n                }\r\n                $sets_value[] = $value;\r\n            }\r\n\r\n            $this->sql .= implode(\',\', $sets) . \' \';\r\n\r\n            if(isset($this->options[\'where\'])){\r\n                $this->sql.= \' WHERE \' . $this->options[\'where\'];\r\n            }\r\n\r\n            if (isset($this->options[\'order\'])) {\r\n                $this->sql .= \' ORDER BY \' . $this->options[\'order\'];\r\n            }\r\n\r\n            if (isset($this->options[\'limit\'])) {\r\n                $this->sql .= \' LIMIT \' . $this->options[\'limit\'];\r\n            }\r\n            \r\n            $stmt = $this->conn->prepare($this->sql);\r\n            $this->whereBindParam = array_merge($sets_value,$this->whereBindParam);\r\n            if ($this->run($stmt,$this->whereBindParam)){\r\n                return $stmt->rowCount() ? $stmt->rowCount() : true;\r\n            }\r\n        \r\n            return false;\r\n        }\r\n    }\r\n    \r\n    public function delete($delall=false){\r\n        //如果是一个没有删除条件的删除，那么必须指定这个是全部删除\r\n        if (!isset($this->options[\'where\']) && $delall) {\r\n            return FALSE;\r\n        }\r\n        \r\n        $this->sql = \'DELETE FROM `\' . $this->table . \'`\';\r\n        \r\n        if(isset($this->options[\'where\'])){\r\n            $this->sql.= \' WHERE \' . $this->options[\'where\'];\r\n        }\r\n        \r\n        if (isset($this->options[\'order\'])) {\r\n            $this->sql .= \' ORDER BY \' . $this->options[\'order\'];\r\n        }\r\n        \r\n        if (isset($this->options[\'limit\'])) {\r\n            if(!is_numeric($this->options[\'limit\'])){\r\n                exit(\'delete 语句不支持limit \'.$this->options[\'limit\'].\' 请改成类似limit x\');\r\n            }\r\n            $this->sql .= \' LIMIT \' . $this->options[\'limit\'];\r\n        }\r\n        \r\n        $stmt = $this->conn->prepare($this->sql);\r\n        \r\n        if ($this->run($stmt,$this->whereBindParam)){\r\n            return $stmt->rowCount() ? $stmt->rowCount() : true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    //这里特意不用query，避免跟PDO的query同名\r\n    public function runSql($sql,$bind_paramlist = array(),$type = \'DQL\'){\r\n        $this->sql = $sql;\r\n        $this->whereBindParam = $bind_paramlist;\r\n        \r\n        $stmt = $this->conn->prepare($this->sql);\r\n        \r\n        //DQL  SELECT\r\n        if($type == \'DQL\'){\r\n            $this->run($stmt,$this->whereBindParam);\r\n            return $result=$stmt->fetchAll(PDO::FETCH_ASSOC); \r\n            \r\n        //DML  INSERT UPDATE DELETE\r\n        }elseif($type == \'DML\'){\r\n            if ($this->run($stmt,$this->whereBindParam)){\r\n                return $stmt->rowCount() ? $stmt->rowCount() : true;\r\n            } \r\n            \r\n        //DDL CREATE TABLE/VIEW/INDEX/SYN/CLUSTER\r\n        }elseif($type == \'DDL\'){\r\n            return $this->run($stmt,$this->whereBindParam);\r\n            \r\n        //DCL GRANT ROLLBACK COMMIT\r\n        }else{\r\n            return $this->run($stmt,$this->whereBindParam);\r\n        }\r\n    }\r\n    \r\n    public function run($stmt,$BindParam = array()){\r\n        $this->clear();\r\n        if(!empty($BindParam)){\r\n            return $stmt->execute($BindParam);\r\n        }else{\r\n            return $stmt->execute();\r\n        }\r\n    }\r\n    \r\n    public function clear(){\r\n        $this->table            = null;\r\n        $this->options          = null;\r\n        $this->whereBindParam   = array();\r\n    }\r\n    \r\n    public function getSql() {\r\n        return $this->sql;\r\n    }\r\n    \r\n    /*\r\n     * $sth = $dbh->prepare(\'SELECT name, colour, calories\r\n            FROM fruit\r\n            WHERE calories < ? AND colour = ?\');\r\n        $sth->execute($this->whereBindParam);\r\n     */\r\n    public function where($str,$whereBindParam_list = array()){\r\n        $this->options[\'where\'] = $str;\r\n        $this->whereBindParam   = $whereBindParam_list;\r\n        return $this;\r\n    }\r\n    \r\n    public function groupBy($str){\r\n        $this->options[\'group\'] = $str;\r\n        return $this;\r\n    }\r\n    \r\n    public function orderBy($str){\r\n        $this->options[\'order\'] = $str;\r\n        return $this;\r\n    }\r\n    \r\n    \r\n    public function having($str){\r\n        $this->options[\'having\'] = $str;\r\n        return $this;\r\n    }\r\n    \r\n    public function limit($str){\r\n        $this->options[\'limit\'] = $str;\r\n        return $this;\r\n    }\r\n    \r\n    public function beginTransaction(){\r\n        $this->conn->beginTransaction();\r\n    }\r\n    \r\n    public function commint(){\r\n        $this->conn->commit();\r\n    }\r\n    \r\n    public function rollBack(){\r\n        $this->conn->rollBack();\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\n```\r\n\r\n3.model查询User.php\r\n```php\r\n<?php\r\nclass UserModel extends Model{\r\n    public function __construct($params) {\r\n       parent::__construct($params);\r\n    }\r\n    \r\n    public function addUser($param) {\r\n        $con = $this->table(\'k_user\');\r\n        $con->insert($param);\r\n        return $con->getInsertId(\'uid\');\r\n    }\r\n    \r\n    public function delUser($id,$qk_pwd) {\r\n        return $this->table(\'k_user\')\r\n                    ->where(\'uid != ? and qk_pwd = ?\',array($id,$qk_pwd))\r\n                    ->orderBy(\'uid desc\')\r\n                    ->limit(\'1\')\r\n                    ->delete();\r\n    }\r\n    \r\n    public function updateUser($uid,$username,$map) {\r\n        $uid = 975;\r\n        $username = \'owei\';\r\n        $map = array(\'money+\'=>1,\'qk_pwd\'=>\'0000\');\r\n        return $this->table(\'k_user\')\r\n                    ->where(\'uid = ? and username = ?\',array($uid,$username))\r\n                    ->orderBy(\'uid desc\')\r\n                    ->limit(\'1\')\r\n                    ->update($map);\r\n    }\r\n    \r\n    public function getUser($uid,$username) {\r\n        $uid = 975;\r\n        $username = \'owei\';\r\n        return $this->table(\'k_user\')\r\n                    ->field(\'*\')\r\n                    ->where(\'uid = ? and username = ?\',array($uid,$username))\r\n                    ->groupBy(\'username\')\r\n                    ->having(\'count(uid) > 0\')\r\n                    ->orderBy(\'uid desc\')\r\n                    ->limit(\'1\')\r\n                    ->select();\r\n    }\r\n    \r\n    public function getUser2($username,$passwd) {\r\n        return $this->table(\'admin_user\')\r\n                    ->field(\'*\')\r\n                    ->where(\'username = ? and passwd = ?\',array($username,$passwd))\r\n                    ->groupBy(\'username\')\r\n                    ->limit(\'1\')\r\n                    ->select();\r\n    }\r\n\r\n}\r\n```\r\n\r\n4.控制器调用model方法查询，控制器直接查询Test.php\r\n\r\n```php\r\n<?php\r\nclass TestController extends Yaf_Controller_Abstract {\r\n	public function init() {\r\n        Yaf_Dispatcher::getInstance()->disableView(); //禁止模板输出\r\n    }\r\n    //http://myyaf.com/test/index\r\n    public function indexAction() {\r\n        $model = new UserModel(\'private\');\r\n        $res = $model->getUser(975,\'owei\');\r\n        p($res);\r\n        p($model->getSql());\r\n        \r\n        $model2 = new Model(\'private\');\r\n        $res2 = $model2->table(\'k_user\')\r\n                    ->field(\'uid,username\')\r\n                    ->where(\'uid = ? and username = ?\',array(975,\'owei\'))\r\n                    ->groupBy(\'username\')\r\n                    ->having(\'count(uid) > 0\')\r\n                    ->orderBy(\'uid desc\')\r\n                    ->limit(\'1\')\r\n                    ->select();\r\n        p($res2);\r\n        p($model2->getSql());\r\n        \r\n        $prepare_sql = \'SELECT uid,username,site_id FROM `k_user` WHERE uid= ? and username = ? GROUP BY username HAVING count(uid) > 0 ORDER BY uid desc LIMIT 1\';\r\n        $res3 = $model2->runSql($prepare_sql,array(975,\'owei\'),\'DQL\');\r\n        p($res3);\r\n        p($model2->getSql());\r\n        \r\n        $sql = \'SELECT uid,username,site_id FROM `k_user`  GROUP BY username HAVING count(uid) > 0 ORDER BY uid desc LIMIT 3\';\r\n        $res4 = $model2->getconn()->query($sql)->fetchAll(PDO::FETCH_ASSOC);\r\n        p($res4);\r\n        p($model2->getSql());//直接用query无法获取上一次的SQL，获取到的是上上次的SQL\r\n        \r\n        $this->getView()->assign(\"content\", \"WTFx\");\r\n    }\r\n   \r\n   //http://myyaf.com/test/delUser\r\n   public function delUserAction() {\r\n        p(\'delUserAction\');\r\n        $model = new UserModel(\'private\');\r\n        $res = $model->delUser($id=975,$qk_pwd=1234);\r\n        p($res);\r\n        //$this->getView()->assign(\"content\", \"WTFx\");\r\n   }\r\n   \r\n   //http://myyaf.com/test/updateUser\r\n   public function updateUserAction() {\r\n        p(\'updateUserAction\');\r\n        $model = new UserModel(\'private\');\r\n        $uid = 975;\r\n        $username = \'owei\';\r\n        $map = array(\'money+\'=>1,\'qk_pwd\'=>0000);\r\n        $res = $model->updateUser($uid,$username,$map);\r\n        p($res);\r\n        //$this->getView()->assign(\"content\", \"WTFx\");\r\n   }\r\n   \r\n   //http://myyaf.com/test/addUser\r\n   public function addUserAction() {\r\n        p(\'addUserAction\');\r\n        $data = array(\'username\'=>\'yaf\'.time(), \'password\'=>md5(\'123456\'),\'qk_pwd\'=>1234,\'site_id\'=>\'t\');\r\n        $model = new UserModel(\'private\');\r\n        $res = $model->addUser($data);\r\n        p($res);\r\n   }\r\n   \r\n\r\n}\r\n?>\r\n```\r\n\r\n5.单入口文件\r\n```php\r\n<?php\r\ndefine(\"APP_PATH\",  realpath(dirname(__FILE__) . \'/../\')); /* 指向public的上一级 */\r\n$app  = new Yaf_Application(APP_PATH . \"/conf/application.ini\");\r\n//导入一个函数库文件common.php，即可使用common.php中的函数\r\nYaf_Loader::import(APP_PATH.\'/application/helpers/common.php\');\r\n$app\r\n    ->bootstrap() //可选的调用\r\n    ->run();\r\n?>\r\n```\r\n\r\n6.Bootstrap.php\r\n```php\r\n<?php\r\n\r\n/**\r\n * 所有在Bootstrap类中, 以_init开头的方法, 都会被Yaf调用,\r\n * 这些方法, 都接受一个参数:Yaf_Dispatcher $dispatcher\r\n * 调用的次序, 和申明的次序相同\r\n */\r\nclass Bootstrap extends Yaf_Bootstrap_Abstract{\r\n\r\n        public function _initConfig(Yaf_Dispatcher $dispatcher) {\r\n                $config = Yaf_Application::app()->getConfig();\r\n                Yaf_Registry::set(\"config\", $config);\r\n        }\r\n\r\n}\r\n```\r\n\r\n7.配置文件application.ini\r\n```shell\r\n[common]\r\n;支持直接写PHP中的已定义常量\r\napplication.directory=APP_PATH \"/application/\"\r\n[product : common]\r\n    database.private.type = mysql\r\n    database.private.host = 127.0.0.1\r\n    database.private.port = 3306\r\n    database.private.user = root\r\n    database.private.pwd  = root\r\n    database.private.name = dbname\r\n```\r\n                                                                ', '### 手写一个yaf的ORM\r\n>了解一只青蛙的最好方式不是解刨一只青蛙，而是创造一只青蛙。\r\n\r\nyaf 扩展 ORM\r\n很多人很怀疑yaf，觉得功能不怎么齐全，会导致重复造轮子\r\n的确是这么一会事\r\n但是，仔细想想yaf最求的是极速当然会去掉一些没有用的功能，也让程序员有更多的想象空间，当然也要承受重复造轮子的痛苦，我不喜欢这种造轮子的感觉，但是我喜欢这种自己探索的感觉\r\n'), ('20', '个人小目标', '1', '2018-01-30 02:24:10', '2018-01-30 03:46:36', ',15,', '0', null, '1.yaf完成一个分页类,完善ORM添加一个数据处理类\r\n2.博客加一个畅言\r\n3.博客改成全静态化，数据写入js中，后台编辑从新生成js文件\r\n4.博客添加一个在线聊天，支持图片文件传送\r\n4.git\r\n5.docker\r\n6.linux\r\n7.数据结构与算法\r\n8.完成一个同步请求，添加队列，任务完成推送前台的demo\r\n9.go完成一个web\r\n10.后台添加一个RBAC                                ', '1.yaf完成一个分页类,完善ORM添加一个数据处理类\r\n2.博客加一个畅言\r\n3.博客改成全静态化，数据写入js中，后台编辑从新生成js文件\r\n4.博客添加一个在线聊天，支持图片文件传送\r\n4.git\r\n5.docker\r\n6.linux\r\n7.数据结构与算法\r\n8.完成一个同步请求，添加队列，任务完成推送前台的demo\r\n9.go完成一个web');
COMMIT;

-- ----------------------------
--  Table structure for `k_user`
-- ----------------------------
DROP TABLE IF EXISTS `k_user`;
CREATE TABLE `k_user` (
  `uid` int(11) NOT NULL AUTO_INCREMENT COMMENT '??ID',
  `username` varchar(15) NOT NULL COMMENT '????',
  `password` varchar(100) NOT NULL COMMENT '????',
  `money` decimal(20,2) DEFAULT '0.00',
  `pay_num` varchar(50) DEFAULT NULL COMMENT '??',
  `qk_pwd` varchar(4) NOT NULL COMMENT '????',
  PRIMARY KEY (`uid`,`username`),
  UNIQUE KEY `sname` (`username`),
  UNIQUE KEY `uid` (`uid`),
  KEY `username` (`username`),
  KEY `money` (`money`)
) ENGINE=InnoDB AUTO_INCREMENT=12778093 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='???';

-- ----------------------------
--  Records of `k_user`
-- ----------------------------
BEGIN;
INSERT INTO `k_user` VALUES ('975', 'owei', '14e1b600b1fd579f47433b88e8d85291', '12225.00', '', '0000'), ('6356518', 'yu9988', 'd1fb6fd906929201c7dfc69c5a241c87', '653.11', '622908118439595111', '1971'), ('12746194', 'wm5566', 'cf2331f0f3393fb73386092b1ead0b72', '1618.00', '6214835916734146', '8888');
COMMIT;


SET FOREIGN_KEY_CHECKS = 1;
